// <auto-generated/>
#pragma warning disable
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using Subsetsix.Api.Entities;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertItemOperation1785040576
    public class UpsertItemOperation1785040576 : Marten.Internal.Operations.StorageOperation<Subsetsix.Api.Entities.Item, System.Guid>
    {
        private readonly Subsetsix.Api.Entities.Item _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertItemOperation1785040576(Subsetsix.Api.Entities.Item document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_upsert_item(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setCurrentRevisionParameter(parameters[3]);
        }

    }

    // END: UpsertItemOperation1785040576
    
    
    // START: InsertItemOperation1785040576
    public class InsertItemOperation1785040576 : Marten.Internal.Operations.StorageOperation<Subsetsix.Api.Entities.Item, System.Guid>
    {
        private readonly Subsetsix.Api.Entities.Item _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertItemOperation1785040576(Subsetsix.Api.Entities.Item document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_insert_item(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setCurrentRevisionParameter(parameters[3]);
        }

    }

    // END: InsertItemOperation1785040576
    
    
    // START: UpdateItemOperation1785040576
    public class UpdateItemOperation1785040576 : Marten.Internal.Operations.StorageOperation<Subsetsix.Api.Entities.Item, System.Guid>
    {
        private readonly Subsetsix.Api.Entities.Item _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateItemOperation1785040576(Subsetsix.Api.Entities.Item document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_update_item(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setCurrentRevisionParameter(parameters[3]);
        }

    }

    // END: UpdateItemOperation1785040576
    
    
    // START: QueryOnlyItemSelector1785040576
    public class QueryOnlyItemSelector1785040576 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<Subsetsix.Api.Entities.Item>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyItemSelector1785040576(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Subsetsix.Api.Entities.Item Resolve(System.Data.Common.DbDataReader reader)
        {

            Subsetsix.Api.Entities.Item document;
            document = _serializer.FromJson<Subsetsix.Api.Entities.Item>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<Subsetsix.Api.Entities.Item> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            Subsetsix.Api.Entities.Item document;
            document = await _serializer.FromJsonAsync<Subsetsix.Api.Entities.Item>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyItemSelector1785040576
    
    
    // START: LightweightItemSelector1785040576
    public class LightweightItemSelector1785040576 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<Subsetsix.Api.Entities.Item>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightItemSelector1785040576(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Subsetsix.Api.Entities.Item Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            Subsetsix.Api.Entities.Item document;
            document = _serializer.FromJson<Subsetsix.Api.Entities.Item>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Subsetsix.Api.Entities.Item> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            Subsetsix.Api.Entities.Item document;
            document = await _serializer.FromJsonAsync<Subsetsix.Api.Entities.Item>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightItemSelector1785040576
    
    
    // START: IdentityMapItemSelector1785040576
    public class IdentityMapItemSelector1785040576 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<Subsetsix.Api.Entities.Item, System.Guid>, Marten.Linq.Selectors.ISelector<Subsetsix.Api.Entities.Item>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapItemSelector1785040576(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Subsetsix.Api.Entities.Item Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Subsetsix.Api.Entities.Item document;
            document = _serializer.FromJson<Subsetsix.Api.Entities.Item>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<Subsetsix.Api.Entities.Item> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Subsetsix.Api.Entities.Item document;
            document = await _serializer.FromJsonAsync<Subsetsix.Api.Entities.Item>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapItemSelector1785040576
    
    
    // START: DirtyTrackingItemSelector1785040576
    public class DirtyTrackingItemSelector1785040576 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<Subsetsix.Api.Entities.Item, System.Guid>, Marten.Linq.Selectors.ISelector<Subsetsix.Api.Entities.Item>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingItemSelector1785040576(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Subsetsix.Api.Entities.Item Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Subsetsix.Api.Entities.Item document;
            document = _serializer.FromJson<Subsetsix.Api.Entities.Item>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Subsetsix.Api.Entities.Item> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Subsetsix.Api.Entities.Item document;
            document = await _serializer.FromJsonAsync<Subsetsix.Api.Entities.Item>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingItemSelector1785040576
    
    
    // START: OverwriteItemOperation1785040576
    public class OverwriteItemOperation1785040576 : Marten.Internal.Operations.StorageOperation<Subsetsix.Api.Entities.Item, System.Guid>
    {
        private readonly Subsetsix.Api.Entities.Item _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public OverwriteItemOperation1785040576(Subsetsix.Api.Entities.Item document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_overwrite_item(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setCurrentRevisionParameter(parameters[3]);
        }

    }

    // END: OverwriteItemOperation1785040576
    
    
    // START: QueryOnlyItemDocumentStorage1785040576
    public class QueryOnlyItemDocumentStorage1785040576 : Marten.Internal.Storage.QueryOnlyDocumentStorage<Subsetsix.Api.Entities.Item, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyItemDocumentStorage1785040576(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Subsetsix.Api.Entities.Item document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(Subsetsix.Api.Entities.Item document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyItemSelector1785040576(session, _document);
        }

    }

    // END: QueryOnlyItemDocumentStorage1785040576
    
    
    // START: LightweightItemDocumentStorage1785040576
    public class LightweightItemDocumentStorage1785040576 : Marten.Internal.Storage.LightweightDocumentStorage<Subsetsix.Api.Entities.Item, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightItemDocumentStorage1785040576(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Subsetsix.Api.Entities.Item document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(Subsetsix.Api.Entities.Item document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightItemSelector1785040576(session, _document);
        }

    }

    // END: LightweightItemDocumentStorage1785040576
    
    
    // START: IdentityMapItemDocumentStorage1785040576
    public class IdentityMapItemDocumentStorage1785040576 : Marten.Internal.Storage.IdentityMapDocumentStorage<Subsetsix.Api.Entities.Item, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapItemDocumentStorage1785040576(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Subsetsix.Api.Entities.Item document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(Subsetsix.Api.Entities.Item document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapItemSelector1785040576(session, _document);
        }

    }

    // END: IdentityMapItemDocumentStorage1785040576
    
    
    // START: DirtyTrackingItemDocumentStorage1785040576
    public class DirtyTrackingItemDocumentStorage1785040576 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<Subsetsix.Api.Entities.Item, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingItemDocumentStorage1785040576(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Subsetsix.Api.Entities.Item document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertItemOperation1785040576
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Subsetsix.Api.Entities.Item document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteItemOperation1785040576
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(Subsetsix.Api.Entities.Item document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingItemSelector1785040576(session, _document);
        }

    }

    // END: DirtyTrackingItemDocumentStorage1785040576
    
    
    // START: ItemBulkLoader1785040576
    public class ItemBulkLoader1785040576 : Marten.Internal.CodeGeneration.BulkLoader<Subsetsix.Api.Entities.Item, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<Subsetsix.Api.Entities.Item, System.Guid> _storage;

        public ItemBulkLoader1785040576(Marten.Internal.Storage.IDocumentStorage<Subsetsix.Api.Entities.Item, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_item(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_item_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_item (\"id\", \"data\", \"mt_dotnet_type\", \"mt_version\", mt_last_modified) (select mt_doc_item_temp.\"id\", mt_doc_item_temp.\"data\", mt_doc_item_temp.\"mt_dotnet_type\", mt_doc_item_temp.\"mt_version\", transaction_timestamp() from mt_doc_item_temp left join public.mt_doc_item on mt_doc_item_temp.id = public.mt_doc_item.id where public.mt_doc_item.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_item target SET data = source.data, mt_dotnet_type = source.mt_dotnet_type, mt_version = source.mt_version, mt_last_modified = transaction_timestamp() FROM mt_doc_item_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_item_temp as select * from public.mt_doc_item limit 0";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, Subsetsix.Api.Entities.Item document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(1, NpgsqlTypes.NpgsqlDbType.Integer);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, Subsetsix.Api.Entities.Item document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(1, NpgsqlTypes.NpgsqlDbType.Integer, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: ItemBulkLoader1785040576
    
    
    // START: ItemProvider1785040576
    public class ItemProvider1785040576 : Marten.Internal.Storage.DocumentProvider<Subsetsix.Api.Entities.Item>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public ItemProvider1785040576(Marten.Schema.DocumentMapping mapping) : base(new ItemBulkLoader1785040576(new QueryOnlyItemDocumentStorage1785040576(mapping)), new QueryOnlyItemDocumentStorage1785040576(mapping), new LightweightItemDocumentStorage1785040576(mapping), new IdentityMapItemDocumentStorage1785040576(mapping), new DirtyTrackingItemDocumentStorage1785040576(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: ItemProvider1785040576
    
    
}

